#summary A simple example of how to implement the upright interfaces.

This example provides a remote hashtable, in which the client can set or get a key-value pair on the server.

=Define request and reply formats=
{{{
package Applications.hashtable;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.IOException;

public class HTRequest {
        enum ht_req_type {READ, WRITE};
        ht_req_type type;
        String key;
        int value;

        HTRequest(ht_req_type type, String key,int val){
                this.type = type;
                this.key = key;
                if(type == ht_req_type.WRITE){
                        value = val;
                }
        }

        private HTRequest(){

        }

        public static HTRequest getHTReqeustFromBytes(byte[] bytes){
                HTRequest ret = new HTRequest();
                ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
                DataInputStream dis = new DataInputStream(bais);
                try{
                        if(dis.readBoolean()){
                                ret.type = ht_req_type.WRITE;
                                ret.key = dis.readUTF();
                                ret.value = dis.readInt();
                        } else {
                                ret.type = ht_req_type.READ;
                                ret.key = dis.readUTF();
                        }
                }catch(IOException e){
                        System.err.println(e.getLocalizedMessage());
                        System.exit(-1);
                }

                return ret;
        }

        public byte[] toBytes(){

                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                DataOutput dataOutput = new DataOutputStream(baos);
                try{
                        if(type == ht_req_type.WRITE){
                                dataOutput.writeBoolean(true);
                                dataOutput.writeUTF(key);
                                dataOutput.writeInt(value);
                        }else{
                                dataOutput.writeBoolean(false);
                                dataOutput.writeUTF(key);
                        }

                }catch(IOException e){
                        System.err.println(e.getLocalizedMessage());
                        System.exit(-1);
                }

                return baos.toByteArray();
        }

}
}}}

{{{
package Applications.hashtable;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.IOException;

import Applications.hashtable.HTRequest.ht_req_type;

public class HTReply {

        boolean error;
        int value;

        HTReply(Boolean err, int val){
                error = err;
                value = val;
        }

        HTReply(){

        }

        public static HTReply getHTReplyFromBytes(byte[] bytes){
                HTReply ret = new HTReply();
                ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
                DataInputStream dis = new DataInputStream(bais);
                try{
                        ret.error = dis.readBoolean();
                        ret.value = dis.readInt();
                }catch(IOException e){
                        System.err.println(e.getLocalizedMessage());
                        System.exit(-1);
                }

                return ret;
        }

        public byte[] toBytes(){
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                DataOutput dataOutput = new DataOutputStream(baos);
                try{
                        dataOutput.writeBoolean(error);
                        dataOutput.writeInt(value);
                }catch(IOException e){
                        System.err.println(e.getLocalizedMessage());
                        System.exit(-1);
                }

                return baos.toByteArray();
        }

}
}}}
=Application Client=
{{{
package Applications.hashtable;

import Applications.hashtable.HTRequest.ht_req_type;
import BFT.clientShim.ClientShimBaseNode;
import BFT.network.TCPNetwork;

public class HTClient{
        ClientShimBaseNode clientShim;
        public HTClient(String membership, int id){
                clientShim = new ClientShimBaseNode(membership, id);
                clientShim.setNetwork(new TCPNetwork(clientShim));
                clientShim.start();
        }

        public void write(String key, int value)
        {
                 HTRequest req = new HTRequest(ht_req_type.WRITE, key, value);
                 HTReply rep = HTReply.getHTReplyFromBytes(clientShim.execute(req.toBytes()));
                 if(rep.error){
                        throw new RuntimeException("Write failed");
                 }
        }

        public int read(String key){
                HTRequest req = new HTRequest(ht_req_type.READ, key, 0);
                HTReply rep = HTReply.getHTReplyFromBytes(clientShim.execute(req.toBytes()));
                if(rep.error){
                      throw new RuntimeException("Read failed");
                }
                return rep.value;
        }
    }
}}}